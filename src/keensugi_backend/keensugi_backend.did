type Result = variant { 
    Ok : null; 
    Err : text 
};

type Report = record {
    hash : text;                                   // Unique identifier for the report (hash)
    incident_type : text;                          // Type of the incident
    description : text;                            // Description of the incident
    location : text;                               // Location of the incident
    severity_level : text;                         // Severity level of the report
    evidence : vec text;                           // List of evidence for the report
    reporter_id : principal;                       // ID of the reporter who filed the report
};

type ReportInput = record {
    incident_type : text;                          // Type of the incident
    description : text;                            // Description of the incident
    location : text;                               // Location of the incident
    severity_level : text;                         // Severity level of the report
    evidence : vec text;                           // List of evidence for the report
};

service : {
    // Report Management
    create_report : (ReportInput, principal) -> (Result);  // Creates a report and returns its hash
    get_report : (text) -> (opt Report);                    // Fetches a report by its hash
    update_report : (text, ReportInput, principal) -> (Result);  // Updates an existing report
    delete_report : (text, principal) -> (Result);          // Deletes a report by its hash
    list_reports : (principal) -> (Result, vec Report);     // Lists all reports (admin access only)
};
